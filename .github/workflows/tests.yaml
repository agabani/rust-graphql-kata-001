name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cargo-build:
    name: Cargo Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Build
        uses: actions-rs/cargo@v1
        env:
          SQLX_OFFLINE: true
        with:
          command: build
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rust-graphql-kata-001-web
          path: |
            ./target/debug/rust-graphql-kata-001-web

  cargo-clippy:
    name: Cargo Clippy
    runs-on: ubuntu-latest
    needs:
      - cargo-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          override: true
          toolchain: stable
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        env:
          SQLX_OFFLINE: true
        with:
          name: Clippy Results
          token: ${{ secrets.GITHUB_TOKEN }}

  cargo-format:
    name: Cargo Format
    runs-on: ubuntu-latest
    needs:
      - cargo-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          args: --all -- --check
          command: fmt

  cargo-test:
    name: Cargo Test
    runs-on: ubuntu-latest
    needs:
      - cargo-build
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Test
        uses: actions-rs/cargo@v1
        env:
          SQLX_OFFLINE: true
        with:
          command: test
